#Customer Segmentation 
##K-Means Clustering
#SQL Query
SELECT a.CUST_MSISDN,a.brnd_name,a.brnd_id,a.brnd_grp,a.brnd_grp_id, a.SVC_CLASS_NAME, a.TXN_DT,a.TXN_ID, a.ORIG_AMT, b.acct_natly, b.acct_dob, b.acct_gndr,b.acct_occ,b.acct_idn_type
FROM EDWDM.TEDW_SINGCASH_SALESJOURNAL_DOM a
RIGHT JOIN EDWDM.TEDW_SINGCASH_ACCOUNT b
ON a.CUST_MSISDN = b.ACCT_NAME
WHERE (a.STAT = 'PST' OR a.STAT = 'PST7' OR a.STAT = 'PST9')
And TRUNC(a.TXN_DT) BETWEEN TO_DATE('01/04/17','DD/MM/YY') AND TO_DATE('01/04/18','DD/MM/YY')
AND a.CUST_MSISDN != '6583381170' 
AND a.CUST_MSISDN != '6597727199'
AND a.CUST_MSISDN != '6596510899'
And a.data_txn_rfnd = 'False'
AND b.acct_stat = 'A'
#Export as csv to C:\\Users\\P1318124\\Desktop\\BA Projects\\Customer Segmentation\\Customer_Segmentation_R.csv
#R Code
#install.packages("pastecs", repos="http://cran.us.r-project.org")
#install.packages("fpc", repos="http://cran.us.r-project.org")
#install.packages("FactoMineR", repos="http://cran.us.r-project.org")
#install.packages("plotly", repos="http://cran.us.r-project.org")
library(tidyr)
library(pastecs)
library(fpc)
library(ggplot2)
library(dplyr)
library(plotly)
library(lubridate)

data <- read.csv("C:\\Users\\P1318124\\Desktop\\BA Projects\\Customer Segmentation\\Customer_Segmentation_R.csv",header=TRUE)

data_rev <- data %>%
select(CUST_MSISDN,TXN_DT,ORIG_AMT)

data_rev <- data_rev[data_rev$ORIG_AMT >= 0.9,]

#Convert date column to date type
#data_rev$TXN_DT <- as.character(data_rev$TXN_DT)
data_rev$TXN_DT <- dmy(data_rev$TXN_DT)
data_rev$TXN_DT <- as.Date(data_rev$TXN_DT,format='%Y/%m/%d')

#Create datediff column to find number of days since last purchase for recency
data_rev$days_since <- as.numeric(difftime(time1='2018-11-05',time2=data_rev$TXN_DT,unit="days"))

#Create dataset to show customer's recency, frequency and monetary information
customers <- data_rev %>%
group_by(CUST_MSISDN) %>%
summarise(recency=min(days_since),frequency=n(),monetary = mean(ORIG_AMT))

#Data Exploration
##Descriptive Statistics
options(digits = 2, scipen = 99)
stat.desc(select(customers, -CUST_MSISDN))

str(customers)

#frequency
ggplot(customers, aes(x = frequency)) +
   geom_histogram(bins = 20, fill = "steelblue") +
   theme_classic() +
   labs(x = "", title = "Purchase frequency") +
   scale_x_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12,14,16,18,20,22))

dim(filter(customers, frequency == 1))[1]/dim(customers)[1]
#only __% of customers made only 1 transaction
dim(filter(customers, frequency == 2))[1]/dim(customers)[1]
#only __% of customers made only 2 transactions
dim(filter(customers, frequency == 3))[1]/dim(customers)[1]
#only __% of customers made only 3 transactions

#recency
ggplot(customers, aes(x = recency)) +
   geom_histogram(fill = "steelblue") +
   theme_classic() +
   labs(x = "", y = "", title = "Recency in Days") +
  scale_x_continuous(breaks = c(0, 250, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000))

#189 days between 30 Apr 2018 and 5 Nov 2018
dim(filter(customers, recency < 369))[1]/dim(customers)[1]
#__% of customers do transactions within 3 months to Apr 2018

dim(filter(customers, recency > 549))[1]/dim(customers)[1]
#__% of customers did not make transaction in 6 months to Apr 2018

#monetary
summary(customers$monetary)

ggplot(customers, aes(x = monetary)) +
   geom_histogram(bins = 20, fill = "steelblue") +
   theme_classic() +
   labs(x = "average amount", title = "Average purchase amount")

ggplot(customers, aes(x = monetary)) +
   geom_histogram(bins = 20, fill = "steelblue") +
   theme_classic() +
   labs(x = "amount (log10)", 
        title = "Average purchase amount\n (Data are log transformed to ease visualization)") +
   scale_x_log10()

#Statistical Segmentation
##Data Preparation
## Remove customer_id column and set as row names
customers <- as.data.frame(customers)
row.names(customers) <- customers$CUST_MSISDN
customers <- select(customers, -CUST_MSISDN)

## Scale data to balance the influence of variables measured on different scales and/or with vastly different ## variances
clust_data <- scale(customers)

#Clustering method
set.seed(11)
hc.complete =hclust (dist(clust_data), method = "complete")
hc.average =hclust (dist(clust_data), method = "average")
hc.ward =hclust (dist(clust_data), method = "ward.D2")

#Dendograms
#plot(hc.complete, main = "Complete Linkage", xlab = "", sub = "", cex = .9)
#plot(hc.average, main = "Average Linkage", xlab = "", sub = "", cex = .9)
#plot(hc.ward, main = "Cluster Tree", xlab = "", sub = "", cex = .9)
#rect.hclust(hc.ward, k = 5, border = "darkred")
plot(hc.ward, main = "Cluster Tree cut at 6 clusters", xlab = "", sub = "", cex = .9)
abline(h = 82, col = "red")
#Cluster tree cut at 6 clusters
clusters <- cutree(hc.ward, 6)
table(clusters)

#Assign customers to clusters
customers$cluster <- clusters

profiles <- customers %>% 
  group_by(cluster) %>%
  summarise_all(funs(mean))

cluster_counts <- customers %>% 
  group_by(cluster) %>% 
  summarise(counts = n())

profiles <- mutate(profiles, counts = cluster_counts$counts) 
profiles

customers$cluster <- as.factor(customers$cluster)


#Clustering visualisation
#monetary vs frequency
ggplot(data = customers,
       aes(x = frequency, y = monetary, colour = cluster, shape = cluster)) +
  geom_point() +
  theme_dark() +
  labs(title = "average amount spent vs. frequency", 
       shape = "customer\nclusters", colour = "customer\nclusters")
#monetary vs recency
ggplot(data = customers,
       aes(x = recency, y = monetary, colour = cluster, shape = cluster)) +
  geom_point() +
  theme_dark() +
  labs(title = "average amount spent vs recency",  shape = "cluster", colour = "cluster")

## Project clusters onto the first 2 principal components

prin_comp <- princomp(clust_data)
nComp <- 2
project <- predict(prin_comp, newdata=clust_data)[,1:nComp]

## Create dataframe with transformed data

project_data <- cbind(as.data.frame(project),
                      cluster = as.factor(clusters))

ggplot(project_data, aes(x=Comp.1, y=Comp.2)) +
   geom_point(aes(shape=cluster, colour = cluster)) +
   theme_dark() +
   labs(x = "Principal Component 1", y = "Principal Component 2")

#Evaluating clusters
clust_no <- 6

set.seed(12)
cboot_hclust <- clusterboot(clust_data, 
                            clustermethod = hclustCBI,
                            method = "ward.D2", 
                            k = clust_no)

bootMean_data <- data.frame(cluster = 1:6, bootMeans = cboot_hclust$bootmean)

#Visualise evaluation results
#A rule of thumb for interpreting stability values suggests that clusters scored below 0.6 should be considered unstable.
#Those between 0.6 and 0.75 are measuring patterns to a reasonable degree. 
#Scores above 0.8 indicate highly stable clusters.

p <- ggplot(data = bootMean_data, aes(x = cluster, y = bootMeans)) +
     geom_point(aes(colour = "darkred", size = 1)) +
     geom_hline(yintercept = c(0.6, 0.8)) +
     labs(y = "stability", title = "Cluster Stability Evaluation") +
     theme(legend.position="none")

ggplotly(p)

#End.





